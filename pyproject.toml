[project]
name = "route-planning"
version = "0.1.0"
description = "Add your description here"
requires-python = ">=3.12"
dependencies = ["PyQt6 >= 6.9.1", "QCustomPlot_PyQt6 >= 2.1.1.2"]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "ruff>=0.13.2",
]

[tool.ruff]
line-length = 105

[tool.ruff.lint.per-file-ignores]
"**/tests/**" = [
    "S101",
    "PLR2004",
    "INP001"
]

[tool.ruff.lint]
select = ["ALL"]
ignore = ["D203", "COM812", "D200", "D212", "N802"]


# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
pythonpath = [
    "."
]