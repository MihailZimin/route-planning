"""Arc class for core."""
import json
import math

from .abstract_geometry import ABCGeo
from .point import Point


class Arc(ABCGeo):
    """
    Arc core class.
    """

    def __init__(self, center: Point, p_start: Point, p_end: Point) -> "Arc":
        """
        Return Arc object, constructed by 3 points.

        Constructed by center, start and end point of Arc,
        arc formed counterclockwise from start point to end point.

        Args:
            center: coordinate(point) of center of Arc
            p_start: coordinate(point) of start of Arc
            p_end: coordinate(point) of end of Arc

        Returns:
            Arc: New Arc instance with such fields as:
                center: center of Arc
                p_start: coordinate(point) of start of Arc
                p_end: coordinate(point) of end of Arc
                angle1: angle in radians between center-to-top-point line and center-to-p_start line
                angle2: angle in radians between center-to-top-point line and center-to-p_end line
                radius: radius of Arc

        """
        radius = Point.calculate_distance(center, p_start)
        if radius != Point.calculate_distance(center, p_end):
            error_msg = ("Invalid input points, distance between"
                         "center and first point is not equal to"
                         "distance between center and second point")
            raise ValueError(error_msg)

        self._a_start = math.acos((center.y - p_start.y) / radius)
        self._a_end = math.acos((center.y - p_end.y) / radius)
        self._center = center
        self._radius = radius
        self._p_start = p_start
        self._p_end = p_end


    @classmethod
    def from_angle(cls, radius: float, center: Point, angle_start: float, angle_end: float) -> "Arc":
        """
        Initialize Arc with radius, center point and angle.

        Constructed by center, radius, angle_start and angle_end point of Arc,
        arc formed counterclockwise from start angle to end angle.

        Args:
            radius: Radius of the arc
            center: Center point of the arc
            angle_start: Angle of the start angle in radians
            angle_end: Angle of the end angle in radians

        Returns:
            Arc: New Arc instance with such fields as:
                center: center of Arc
                p_start: coordinate(point) of start of Arc
                p_end: coordinate(point) of end of Arc
                angle_start: angle in radians between center-to-top-point line and center-to-p_start line
                angle_end: angle in radians between center-to-top-point line and center-to-p_end line
                radius: radius of Arc

        """
        p_start = Point()
        p_start.x = center.x + radius * math.sin(angle_start)
        p_start.y = center.y + radius * math.cos(angle_start)

        p_end = Point()
        p_end.x = center.x + radius * math.sin(angle_end)
        p_end.y = center.y + radius * math.cos(angle_end)

        return cls(center, p_start, p_end)

    def save(self) -> str:
        """
        Return JSON string representation of the object.
        """
        data = {
            "center": self._center.save(),
            "radius": self._radius,
            "p_start": self._p_start.save(),
            "p_end": self._p_end.save(),
            "a_start": self._a_start,
            "a_end": self._a_end,
        }
        return json.dumps(data)

    @classmethod
    def load(cls, json_data: str) -> "Arc":
        """
        Create object from JSON string.

        Args:
            json_data: JSON string generated by save() method

        Returns:
            New instance of the class.

        """
        data = json.loads(json_data)
        return cls(
            Point.load(data["center"]),
            Point.load(data["p_start"]),
            Point.load(data["p_end"]),
        )

    @property
    def radius(self) -> float:
        """
        Return radius of the arc.
        """
        return self._radius

    @radius.setter
    def radius(self, new_radius: float) -> None:
        """
        Set radius of the arc.

        Also change position of points according to new radius.

        Args:
            new_radius: new radius value

        """
        self._radius = new_radius
        self.__adjust_start_point()
        self.__adjust_end_point()

    @property
    def center(self) -> Point:
        """
        Return center point of the arc.
        """
        return self._center

    @center.setter
    def center(self, new_center: Point) -> None:
        """
        Set center point of the arc.

        Also change position of points according to new center.

        Args:
            new_center: new center point

        """
        self._center = new_center
        self.__adjust_start_point()
        self.__adjust_end_point()

    @property
    def a_start(self) -> float:
        """
        Return the angle of the arc in radians.
        """
        return self._a_start

    @a_start.setter
    def a_start(self, new_angle: float) -> None:
        """
        Set angle of the arc in radians.

        Also change start point position according to new angle.

        Args:
            new_angle: new angle value in radians

        """
        self._a_start = new_angle
        self.__adjust_start_point()

    @property
    def a_end(self) -> float:
        """
        Return the angle of the arc in radians.
        """
        return self._angle_end

    @a_end.setter
    def a_end(self, new_angle: float) -> None:
        """
        Set angle of the arc in radians.

        Also change end point position according to new angle.

        Args:
            new_angle: new angle value in radians

        """
        self._a_end = new_angle
        self.__adjust_end_point()

    @property
    def p_start(self) -> Point:
        """
        Return start point.
        """
        return self._p_start

    @p_start.setter
    def p_start(self, new_start: Point) -> None:
        """
        Set start point.

        Also change start angle value according to new start point position.

        Args:
            new_start: new start position in radians.

        """
        self._p_start = new_start
        self._a_start = math.acos((self._center.y - self._p_start.y) / self._radius)

    @property
    def p_end(self) -> Point:
        """
        Return end point.
        """
        return self._p_end

    @p_end.setter
    def p_end(self, new_end: Point) -> None:
        """
        Set end point.

        Also change end angle value according to new end point position.

        Args:
            new_end: new end position in radians.

        """
        self._p_start = new_end
        self._a_end = math.acos((self._center.y - self._p_end.y) / self._radius)


    def __adjust_start_point(self) -> None:
        """
        Adjust start point coordinates according to changes.
        """
        self._p_start.x = self._center.x + self._radius * math.sin(self._a_start)
        self._p_start.y = self._center.y + self._radius * math.cos(self._a_start)

    def __adjust_end_point(self) -> None:
        """
        Adjust end point coordinates according to changes.
        """
        self._p_end.x = self._center.x + self._radius * math.sin(self._a_end)
        self._p_end.y = self._center.y + self._radius * math.cos(self._a_end)

    def __str__(self) -> str:
        """
        Return string representation.
        """
        return self.save()
