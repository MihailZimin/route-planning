"""Circle class for core."""

from .abstract_geometry import ABCGeo
from .point import Point


class Circle(ABCGeo):
    """
    Circle core class.
    """

    def __init__(self, center: Point, radius: float) -> None:
        """
        Initialize 2D circle.

        Args:
            radius: radius of circle
            center: coordinate(point) of center

        """
        self._radius = radius
        self._center = center

    def save(self) -> str:
        """
        Return JSON string representation of the object.
        """
        data = [self._center.save(), str(self._radius)]
        return "; ".join(data)

    @classmethod
    def load(cls, data: str) -> None:
        """
        Create object from JSON string.

        Args:
            data: JSON string generated by save() method

        Returns:
            New instance of the class.

        """
        m_data = data.split("; ")
        return cls(Point.load(m_data[0]), float(m_data[1]))

    @property
    def radius(self) -> float:
        """
        Return radius of circle.
        """
        return self._radius

    @radius.setter
    def radius(self, new_radius: float) -> None:
        """
        Set radius of circle.

        Args:
            new_radius: new radius of circle

        """
        self._radius = new_radius

    @property
    def center(self) -> Point:
        """
        Return center of circle.
        """
        return self._center

    @center.setter
    def center(self, new_center: Point) -> None:
        """
        Set center of circle.

        Args:
            new_center: new coordinate(point) of center of circle

        """
        self._center = new_center

    def __str__(self) -> str:
        """
        Return string representation of circle.
        """
        return f"{self._center!s}; radius={self._radius}"
