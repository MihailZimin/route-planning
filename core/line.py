"""Line class for core."""

from .abstract_geometry import ABCGeo
from .point import Point


class Line(ABCGeo):
    """
    Line core class.
    """

    def __init__(self, start: Point, end: Point) -> None:
        """
        Initialize 2D line.

        Args:
            start: start point of line
            end: end point of line

        """
        self._start = start
        self._end = end

    def save(self) -> str:
        """
        Return JSON string representation of the object.
        """
        string_points = [self._start.save(), self._end.save()]
        return "; ".join(string_points)

    @classmethod
    def load(cls, data: str) -> "Line":
        """
        Create object from JSON string.

        Args:
            data: JSON string generated by save() method

        Returns:
            New instance of the class.

        """
        points = [Point.load(s) for s in data.split("; ")]
        return cls(*points)

    @property
    def start(self) -> Point:
        """
        Return start point of line.
        """
        return self._start

    @start.setter
    def start(self, new_start: Point) -> None:
        """
        Set start point of line.

        Args:
            new_start: new start of line

        """
        self._start = new_start

    @property
    def end(self) -> Point:
        """
        Return end point of line.
        """
        return self._end

    @end.setter
    def end(self, new_end: Point) -> None:
        """
        Set end point of line.

        Args:
            new_end: new end of line

        """
        self._end = new_end

    def __str__(self) -> str:
        """
        Return string representation of line.
        """
        return f"{self._start!s}, {self._end!s}"
