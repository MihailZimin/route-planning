"""Polygon class for core."""
import json

from .abstract_geometry import ABCGeo
from .point import Point


class Polygon(ABCGeo):
    """
    Polygon core class.
    """

    def __init__(self, points: list[Point]) -> None:
        """
        Initialize 2D polygon.

        Point is a vertex of polygon.

        Args:
            points: list of Point objects

        """
        self._points = points

    def save(self) -> str:
        """
        Return JSON string representation of the object.
        """
        return json.dumps([point.save() for point in self._points])

    @classmethod
    def load(cls, json_data: str) -> None:
        """
        Create object from JSON string.

        Args:
            json_data: JSON string generated by save() method

        Returns:
            New instance of the class.

        """
        return cls([Point.load(el) for el in json.loads(json_data)])

    @property
    def points(self) -> list[Point]:
        """
        Return list of vertices of polygon.
        """
        return self._points

    @points.setter
    def points(self, new_points: list[Point]) -> None:
        """
        Set vertices to polygon.

        Args:
            new_points: new coordinates(points) of vertices

        """
        self._points = new_points

    def __str__(self) -> str:
        """
        Return string representation of Polygon.
        """
        return f"{[str(point) for point in self._points]}"
