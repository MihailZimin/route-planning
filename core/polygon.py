"""Polygon class for core."""

from .abstract_geometry import ABCGeo
from .point import Point


class Polygon(ABCGeo):
    """
    Polygon core class.

    Warning:
        The points property returns the actual list reference.
        Modifying this list directly will affect the polygon.
        For safe operations, use the provided methods.

    """

    def __init__(self, points: list[Point]) -> None:
        """
        Initialize 2D polygon.

        Point is a vertex of polygon.

        Args:
            points: list of Point objects

        """
        if points[0] != points[-1]:
            error_msg = "start point and end point must be the same"
            raise ValueError(error_msg)
        self._points = points.copy()

    def save(self) -> str:
        """
        Return JSON string representation of the object.
        """
        points = [point.save() for point in self._points]
        return "; ".join(points)

    @classmethod
    def load(cls, data: str) -> None:
        """
        Create object from JSON string.

        Args:
            data: JSON string generated by save() method

        Returns:
            New instance of the class.

        """
        points = [Point.load(point) for point in data.split("; ")]
        return cls(points)

    @property
    def points(self) -> list[Point]:
        """
        Return list of vertices of polygon.
        """
        return self._points

    @points.setter
    def points(self, new_points: list[Point]) -> None:
        """
        Set vertices to polygon.

        Args:
            new_points: new coordinates(points) of vertices

        """
        self._points = new_points.copy()

    def __str__(self) -> str:
        """
        Return string representation of Polygon.
        """
        return "[" + " ".join([str(point) for point in self._points]) + "]"

    def get_points_copy(self) -> list[Point]:
        """
        Return copy of a list of vertices of polygon.
        """
        return self._points.copy()

    def add_point(self, point: Point) -> None:
        """
        Add a point in the end of a list.
        """
        self._points.append(point)
