"""Polygon class for core."""
import numpy as np

from .abstract_geometry import ABCGeo
from .point import Point


class Polygon(ABCGeo):
    """
    Polygon core class.

    Warning:
        The points property returns the actual list reference.
        Modifying this list directly will affect the polygon.
        For safe operations, use the provided methods.

    """

    def __init__(self, points: list[Point]) -> None:
        """
        Initialize 2D polygon.

        Point is a vertex of polygon.

        Args:
            points: list of Point objects

        """
        self._points = points.copy()
        if self._points[0] != self.points[-1]:
            self._points.append(self._points[0])

    def save(self) -> str:
        """
        Return JSON string representation of the object.
        """
        points = [point.save() for point in self._points]
        return "; ".join(points)

    @classmethod
    def load(cls, data: str) -> "Polygon":
        """
        Create object from JSON string.

        Args:
            data: JSON string generated by save() method

        Returns:
            New instance of the class.

        """
        points = [Point.load(point) for point in data.split("; ")]
        return cls(points)

    @property
    def points(self) -> list[Point]:
        """
        Return list of vertices of polygon.
        """
        return self._points

    @points.setter
    def points(self, new_points: list[Point]) -> None:
        """
        Set vertices to polygon.

        Args:
            new_points: new coordinates(points) of vertices

        """
        self._points = new_points.copy()

    def __str__(self) -> str:
        """
        Return string representation of Polygon.
        """
        return "[" + " ".join([str(point) for point in self._points]) + "]"

    def get_points_copy(self) -> list[Point]:
        """
        Return copy of a list of vertices of polygon.
        """
        return self._points.copy()

    def add_point(self, point: Point) -> None:
        """
        Add a point in the end of a list.
        """
        self._points[-1] = point
        if self._points[0] != self.points[-1]:
            self._points.append(self._points[0])

    @staticmethod
    def _check_on_convex(points: list[Point]) -> bool:
        """
        Check if polygon is convex.

        Args:
            points: list of points that form polygon

        Returns:
            bool variable:
                True if points form convex polygon
                False otherwise

        """
        sides = list(zip(points[:-1], points[1:]))
        pair_sides = zip(sides[:-1], sides[1:])
        cnt_right = cnt_left = 0
        for side1, side2 in pair_sides:
            vec1 = np.array([side1[1].x - side1[0].x, side1[1].y - side1[0].y, 0])
            vec2 = np.array([side2[1].x - side2[0].x, side2[1].y - side2[0].y, 0])
            cross_v1v2 = np.cross(vec1, vec2)
            if cross_v1v2[2] > 0:
                cnt_right += 1
            else:
                cnt_left += 1
        if cnt_left * cnt_right:
            return False
        return True
