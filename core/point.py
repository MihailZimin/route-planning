"""Point geometry class for core."""
import json

from .abstract_geometry import ABCGeo


class Point(ABCGeo):
    """
    Point core class.
    """

    def __init__(self, x: float = 0, y: float = 0) -> None:
        """
        Initialize 2D point.

        Args:
            x: X-coordinate of the point
            y: Y-coordinate of the point

        """
        self._x = x
        self._y = y

    def save(self) -> str:
        """
        Return JSON string representation of the object.
        """
        return json.dumps((self._x, self._y))

    @classmethod
    def load(cls, data: str) -> "Point":
        """
        Create object from JSON string.

        Args:
            data: JSON string generated by save() method

        Returns:
            New instance of the class.

        """
        return cls(*json.loads(data))

    @property
    def x(self) -> float:
        """
        Return x coordinate of point.
        """
        return self._x

    @x.setter
    def x(self, x_coord: float) -> None:
        """
        Set x coordinate of point.

        Args:
            x_coord: new X-coordinate of the point

        """
        self._x = x_coord

    @property
    def y(self) -> float:
        """
        Returns y coordinate of point.
        """
        return self._y

    @y.setter
    def y(self, y_coord: float) -> None:
        """
        Set y coordinate of point.

        Args:
            y_coord: new Y-coordinate of the point

        """
        self._y = y_coord

    def __str__(self) -> str:
        """
        Return string representation of point.
        """
        return f"({self._x}, {self._y})"

    def __eq__(self, other: "Point") -> bool:
        """
        Compare two points.
        """
        if not isinstance(other, Point):
            return False
        return self.x == other.x and self.y == other.y

    def __hash__(self) -> int:
        """
        Return hash of point.
        """
        return hash((self.x, self.y))

    @staticmethod
    def calculate_distance(point1: "Point", point2: "Point") -> float:
        """
        Calculate distance between two points.
        """
        return ((point1.x - point2.x) ** 2 + (point1.y - point2.y) ** 2) ** 0.5
